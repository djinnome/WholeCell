% Generates and parse condition sets
%
% Author: Jonathan Karr, jkarr@stanford.edu
% Affilitation: Covert Lab, Department of Bioengineering, Stanford University
% Last updated: 7/28/2011
classdef ConditionSet
    %generate condition set
    methods (Static = true)
        function generateSingleGeneDeletionConditionSet(sim, metadata, geneWholeCellModelIDs, replicates, fileName)
            import edu.stanford.covert.cell.sim.util.ConditionSet;
            
            g = sim.gene;
            
            if strcmp(geneWholeCellModelIDs, '-all')
                geneWholeCellModelIDs = g.wholeCellModelIDs;
            elseif ischar(geneWholeCellModelIDs)
                geneWholeCellModelIDs = {geneWholeCellModelIDs};
            end
            
            conditions = repmat(struct(...
                'shortDescription', [], ...
                'longDescription', [], ...
                'replicates', replicates, ...
                'perturbations', struct(...
                    'geneticKnockouts', [])), ...
                numel(geneWholeCellModelIDs), 1);
            
            for i = 1:numel(geneWholeCellModelIDs)
                conditions(i).shortDescription = sprintf('Single-gene (%s; %s) deletion simulation set', ...
                    geneWholeCellModelIDs{i}, g.names{strcmp(g.wholeCellModelIDs, geneWholeCellModelIDs{i})});
                conditions(i).longDescription = sprintf('Single-gene (%s; %s) deletion simulation set with %d replicates', ...
                    geneWholeCellModelIDs{i}, g.names{strcmp(g.wholeCellModelIDs, geneWholeCellModelIDs{i})}, replicates);
                conditions(i).perturbations.geneticKnockouts = geneWholeCellModelIDs(i);
            end
            
            ConditionSet.generateConditionSet(sim, metadata, conditions, fileName);
        end
        
        function generateConditionSet(sim, metadata, conditions, fileName)
            import edu.stanford.covert.cell.sim.constant.Condition;
            import edu.stanford.covert.cell.sim.util.ConditionSet;
            
            comp = sim.compartment;
            stim = sim.state('Stimulus');
            m = sim.state('Metabolite');
            
            %initialize xml file
            fid = fopen(fileName, 'w');
            fprintf(fid, '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n');
            fprintf(fid, '<!-- Autogenerated by %s at %s -->\n',  'edu.stanford.covert.cell.sim.util.ConditionSet', datestr(now, 31));
            fprintf(fid, '<conditions\n');
            fprintf(fid, '    xmlns="http://covertlab.stanford.edu"\n');
            fprintf(fid, '    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n');
            fprintf(fid, '    xsi:schemaLocation="http://covertlab.stanford.edu runSimulations.xsd">\n');
            
            %metadata
            fprintf(fid, '    <firstName><![CDATA[%s]]></firstName>\n', metadata.firstName);
            fprintf(fid, '    <lastName><![CDATA[%s]]></lastName>\n', metadata.lastName);
            fprintf(fid, '    <email><![CDATA[%s]]></email>\n', metadata.email);
            fprintf(fid, '    <affiliation><![CDATA[%s]]></affiliation>\n', metadata.affiliation);
            fprintf(fid, '    <userName><![CDATA[%s]]></userName>\n', metadata.userName);
            fprintf(fid, '    <hostName><![CDATA[%s]]></hostName>\n', metadata.hostName);
            fprintf(fid, '    <ipAddress><![CDATA[%s]]></ipAddress>\n', metadata.ipAddress);
            fprintf(fid, '    <revision>%d</revision>\n', metadata.revision);
            fprintf(fid, '    <differencesFromRevision><![CDATA[%s]]></differencesFromRevision>\n', metadata.differencesFromRevision);
            
            %conditions
            for i = 1:numel(conditions)
                %open condition
                fprintf(fid, '    <condition>\n');
                
                %metadata
                fprintf(fid, '        <shortDescription><![CDATA[%s]]></shortDescription>\n', conditions(i).shortDescription);
                fprintf(fid, '        <longDescription><![CDATA[%s]]></longDescription>\n', conditions(i).longDescription);
                fprintf(fid, '        <replicates>%d</replicates>\n', conditions(i).replicates);
                
                %options, parameters, fitted constants, fixed constants
                ConditionSet.generateConditionSet_FormatParameters(conditions(i), 'option', fid);
                ConditionSet.generateConditionSet_FormatParameters(conditions(i), 'parameter', fid);
                ConditionSet.generateConditionSet_FormatParameters(conditions(i), 'fittedConstant', fid);
                ConditionSet.generateConditionSet_FormatParameters(conditions(i), 'fixedConstant', fid);
                
                %perturbations
                if isfield(conditions(i), 'perturbations') && isstruct(conditions(i).perturbations)
                    %close
                    fprintf(fid, '        <perturbations>\n');
                    
                    %genetic knockouts
                    if isfield(conditions(i).perturbations, 'geneticKnockouts')
                        for j = 1:size(conditions(i).perturbations.geneticKnockouts, 1)
                            fprintf(fid, '            <perturbation type="%s" component="%s"/>\n', ...
                                'geneticKnockout', conditions(i).perturbations.geneticKnockouts{j});
                        end
                    end
                    
                    %stimulus
                    if isfield(conditions(i).perturbations, 'stimulus')
                        for j = 1:size(conditions(i).perturbations.stimulus, 1)
                            fprintf(fid, '            <perturbation type="%s" component="%s" compartment="%s" initialTime="%f" finalTime="%f" value="%f"/>\n', ...
                                'stimulus', ....
                                stim.wholeCellModelIDs{conditions(i).perturbations.stimulus(j, Condition.objectIndexs)}, ...
                                comp.wholeCellModelIDs{conditions(i).perturbations.stimulus(j, Condition.compartmentIndexs)}, ...
                                conditions(i).perturbations.stimulus(j, Condition.initialTimeIndexs), ...
                                conditions(i).perturbations.stimulus(j, Condition.finalTimeIndexs), ...
                                conditions(i).perturbations.stimulus(j, Condition.valueIndexs));
                        end
                    end
                    
                    %media
                    if isfield(conditions(i).perturbations, 'media')
                        for j = 1:size(conditions(i).perturbations.media, 1)
                            fprintf(fid, '            <perturbation type="%s" component="%s" compartment="%s" initialTime="%f" finalTime="%f" value="%f"/>\n', ...
                                'media', ....
                                m.wholeCellModelIDs{conditions(i).perturbations.media(j, Condition.objectIndexs)}, ...
                                comp.wholeCellModelIDs{conditions(i).perturbations.media(j, Condition.compartmentIndexs)}, ...
                                conditions(i).perturbations.media(j, Condition.initialTimeIndexs), ...
                                conditions(i).perturbations.media(j, Condition.finalTimeIndexs), ...
                                conditions(i).perturbations.media(j, Condition.valueIndexs));
                        end
                    end
                    
                    %close
                    fprintf(fid, '        </perturbations>\n');
                end
                
                %close condition
                fprintf(fid, '    </condition>\n');
            end
            
            %finalize xml file
            fprintf(fid, '</conditions>\n');
            fclose(fid);
        end
        
        function generateConditionSet_FormatParameters(condition, type, fid)
            import edu.stanford.covert.cell.sim.util.ConditionSet;
            
            types = [type 's'];
            
            if isfield(condition, types) && isstruct(condition.(types))
                %open
                fprintf(fid, '        <%s>\n', types);
                
                %global
                fields = setdiff(fieldnames(condition.(types)), {'states', 'processes'});
                for j = 1:numel(fields)
                    val = condition.(types).(fields{j});
                    fprintf(fid, '            <%s name="%s" value="%s"/>\n', ...
                        type, fields{j}, ConditionSet.jsonFormat(val));
                end
                
                %states
                if isfield(condition.(types), 'states')
                    fields = fieldnames(condition.(types).states);
                    for j = 1:numel(fields)
                        subfields = fieldnames(condition.(types).states.(fields{j}));
                        for k = 1:numel(subfields)
                            val = condition.(types).states.(fields{j}).(subfields{k});
                            fprintf(fid, '            <%s state="%s" name="%s" value="%s"/>\n', ...
                                type, fields{j}, subfields{k}, ...
                                ConditionSet.jsonFormat(val));                           
                        end
                    end
                end
                
                %processes
                if isfield(condition.(types), 'processes')
                    fields = fieldnames(condition.(types).processes);
                    for j = 1:numel(fields)
                        subfields = fieldnames(condition.(types).processes.(fields{j}));
                        for k = 1:numel(subfields)
                            val = condition.(types).processes.(fields{j}).(subfields{k});                            
                            fprintf(fid, '            <%s process="%s" name="%s" value="%s"/>\n', ...
                                type, fields{j}, subfields{k}, ...
                                ConditionSet.jsonFormat(val));
                        end
                    end
                end
                
                %close
                fprintf(fid, '        </%s>\n', types);
            end
        end
    end
    
    %parse condition set
    methods (Static)
        function data = parseConditionSet(sim, fileName)
            import edu.stanford.covert.cell.sim.constant.Condition;
            import edu.stanford.covert.cell.sim.util.ConditionSet;
            
            data = struct(...
                'metadata', struct(...
                    'firstName', [], ...
                    'lastName', [], ...
                    'email', [], ...
                    'affiliation', [], ...
                    'userName', [], ...
                    'hostName', []', ...
                    'ipAddress', [], ...
                    'revision', [], ...
                    'differencesFromRevision', [], ...
                    'shortDescription', [], ...
                    'longDescription', []), ...
                'options', struct('states',struct,'processes',struct), ...
                'parameters', struct('states',struct,'processes',struct), ...
                'perturbations', struct('geneticKnockouts', [], 'stimulus', [], 'media', []));
            data.perturbations.geneticKnockouts = cell(0, 1);
            data.perturbations.stimulus = zeros(0, 6);
            data.perturbations.media = zeros(0, 6);
            
            xml = xmlread(fileName);
            edu.stanford.covert.cell.sim.util.ConditionSet.validateConditionSet(xml);
            
            condition = xml.getElementsByTagName('condition').item(0);
            
            %metadata
            data.metadata.firstName = char(xml.getElementsByTagName('firstName').item(0).getFirstChild.getNodeValue);
            data.metadata.lastName = char(xml.getElementsByTagName('lastName').item(0).getFirstChild.getNodeValue);
            data.metadata.email = char(xml.getElementsByTagName('email').item(0).getFirstChild.getNodeValue);
            data.metadata.affiliation = char(xml.getElementsByTagName('affiliation').item(0).getFirstChild.getNodeValue);
            data.metadata.userName = char(xml.getElementsByTagName('userName').item(0).getFirstChild.getNodeValue);
            data.metadata.hostName = char(xml.getElementsByTagName('hostName').item(0).getFirstChild.getNodeValue);
            data.metadata.ipAddress = char(xml.getElementsByTagName('ipAddress').item(0).getFirstChild.getNodeValue);
            data.metadata.revision = str2double(char(xml.getElementsByTagName('revision').item(0).getFirstChild.getNodeValue));
            tmp = xml.getElementsByTagName('differencesFromRevision');
            if tmp.getLength() > 0 && tmp.item(0).getChildNodes.getLength() > 0
                data.metadata.differencesFromRevision = char(tmp.item(0).getFirstChild.getNodeValue);
            else
                data.metadata.differencesFromRevision = char([]);
            end
            data.metadata.shortDescription = char(condition.getElementsByTagName('shortDescription').item(0).getFirstChild.getNodeValue);
            data.metadata.longDescription = char(condition.getElementsByTagName('longDescription').item(0).getFirstChild.getNodeValue);
            
            %options, parameters, fitted constants, fixed constants
            data.options = ConditionSet.parseConditionSet_Parameters(xml, 'option');
            data.parameters = ConditionSet.parseConditionSet_Parameters(xml, 'parameter');
            data.fittedConstants = ConditionSet.parseConditionSet_Parameters(xml, 'fittedConstant');
            data.fixedConstants = ConditionSet.parseConditionSet_Parameters(xml, 'fixedConstant');
            
            %perturbations
            s = sim.state('Stimulus');
            m = sim.state('Metabolite');
            nStim = numel(s.wholeCellModelIDs);
            nMet = numel(m.wholeCellModelIDs);
            nComp = sim.compartment.count;
            
            perturbations = xml.getElementsByTagName('perturbation');
            for i = 1:perturbations.getLength
                perturbation = perturbations.item(i-1);
                
                type = char(perturbation.getAttribute('type'));
                componentName = char(perturbation.getAttribute('component'));
                compartmentName = char(perturbation.getAttribute('compartment'));
                initialTime = char(perturbation.getAttribute('initialTime'));
                initialTime = strrep(initialTime, 'INF','Inf');
                initialTime = str2double(initialTime);
                finalTime = char(perturbation.getAttribute('finalTime'));
                finalTime = strrep(finalTime, 'INF','Inf');
                finalTime = str2double(finalTime);                
                value = char(perturbation.getAttribute('value'));
                value = strrep(value, 'INF','Inf');
                value = str2double(value);
                
                switch (type)
                    case 'geneticKnockout'
                        data.perturbations.geneticKnockouts = [
                            data.perturbations.geneticKnockouts;
                            {componentName}];
                    case 'stimulus'
                        component = s.getIndexs(componentName);
                        compartment = sim.compartment.getIndexs(compartmentName);
                        data.perturbations.stimulus = [
                            data.perturbations.stimulus;
                            component compartment value initialTime finalTime sub2ind([nStim nComp], component, compartment)];
                    case 'media'
                        component = m.getIndexs(componentName);
                        compartment = sim.compartment.getIndexs(compartmentName);
                        data.perturbations.media = [
                            data.perturbations.media;
                            component compartment value initialTime finalTime sub2ind([nMet nComp], component, compartment)];
                end
            end
        end
        
        function data = parseConditionSet_Parameters(xml, type)
            import edu.stanford.covert.cell.sim.util.ConditionSet;
            
            data = struct('processes', struct(), 'states', struct());
            
            parameters = xml.getElementsByTagName(type);
            for i = 1:parameters.getLength
                parameter = parameters.item(i-1);
                
                name = char(parameter.getAttribute('name'));
                indexName = char(parameter.getAttribute('index'));
                state = strrep(char(parameter.getAttribute('state')), 'State_', '');
                process = strrep(char(parameter.getAttribute('process')), 'Process_', '');
                value = ConditionSet.jsonParse(char(parameter.getAttribute('value')));
                                
                if ~isempty(state)
                    if isempty(indexName)
                        data.states.(state).(name) = value;
                    else
                        index = str2double(indexName);
                        if isnan(index)
                            index = sim.state(state).(indexName);
                            data.states.(state).(name)(index) = value;
                        else
                            data.states.(state).(name)(index, 1) = value;
                        end
                        
                    end
                elseif ~isempty(process)
                    if isempty(indexName)
                        data.processes.(process).(name) = value;
                    else
                        index = str2double(indexName);
                        if isnan(indexName)
                            index = sim.process(process).(indexName);
                            data.processes.(process).(name)(index) = value;
                        else
                            data.processes.(process).(name)(index, 1) = value;
                        end                        
                    end
                else
                    if isempty(indexName)
                        data.(name) = value;
                    else
                        index = str2double(indexName);
                        if isnan(indexName)
                            index = sim.(indexName);
                            data.(name)(index) = value;
                        else
                            data.(name)(index, 1) = value;
                        end                        
                    end
                end
            end
        end
        
        function validateConditionSet(xml)
            hasConditions = 0;
            for i = 1:xml.getChildNodes.getLength
                child = xml.getChildNodes.item(i-1);
                switch char(child.getNodeName)
                    case {'#comment', '#text'}
                    case 'conditions'
                        hasConditions = hasConditions+1;
                        edu.stanford.covert.cell.sim.util.ConditionSet.validateConditions(child);
                    otherwise
                        throw(MException('ConditionSet:invalidXML','invalid XML'));
                end
            end
            if hasConditions~=1
                throw(MException('ConditionSet:invalidXML','invalid XML'));
            end
        end
        
        function validateConditions(xml)
            hasFirstName = 0;
            hasLastName = 0;
            hasEmail = 0;
            hasAffiliation = 0;
            hasUserName = 0;
            hasHostName = 0;
            hasIpAddress = 0;
            hasRevision = 0;
            hasDifferencesFromRevision = 0;
            hasCondition = 0;
            for i = 1:xml.getChildNodes.getLength
                child = xml.getChildNodes.item(i-1);
                switch char(child.getNodeName)
                    case {'#comment', '#text'}
                    case 'firstName'
                        hasFirstName = hasFirstName+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'lastName'
                        hasLastName = hasLastName+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'email'
                        hasEmail = hasEmail+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'affiliation'
                        hasAffiliation = hasAffiliation+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'userName'
                        hasUserName = hasUserName+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'hostName'
                        hasHostName = hasHostName+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'ipAddress'
                        hasIpAddress = hasIpAddress+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'revision'
                        hasRevision = hasRevision+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'differencesFromRevision'
                        hasDifferencesFromRevision = hasDifferencesFromRevision+1;
                    case 'condition'
                        hasCondition = hasCondition+1;
                        edu.stanford.covert.cell.sim.util.ConditionSet.validateCondition(child);
                    otherwise
                        throw(MException('ConditionSet:invalidXML','invalid XML'));
                end
            end
            if      hasFirstName~=1 || hasLastName~=1 || hasEmail~=1 || hasAffiliation~=1 || ...
                    hasUserName~=1 || hasHostName~=1 || hasIpAddress~=1 || hasRevision~=1 || hasDifferencesFromRevision~=1 || ...
                    hasCondition~=1
                throw(MException('ConditionSet:invalidXML','invalid XML'));
            end
        end
        
        function validateCondition(xml)
            hasName = 0;
            hasDescription = 0;
            for i = 1:xml.getChildNodes.getLength
                child = xml.getChildNodes.item(i-1);
                switch char(child.getNodeName)
                    case {'#comment', '#text'}
                    case 'shortDescription'
                        hasName = hasName+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'longDescription'
                        hasDescription = hasDescription+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'replicates'
                        [x, status] = str2num(char(child.getFirstChild.getNodeValue)); %#ok<ST2NM>
                        if ~status
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                        validateattributes(x, {'numeric'}, {'real', 'nonnegative', 'integer'});
                    case {'options', 'parameters', 'fittedConstants', 'fixedConstants'}
                        edu.stanford.covert.cell.sim.util.ConditionSet.validateParameters(child);
                    case 'perturbations'
                        edu.stanford.covert.cell.sim.util.ConditionSet.validatePerturbations(child);
                    otherwise
                        throw(MException('ConditionSet:invalidXML','invalid XML'));
                end
            end
            if hasName~=1 || hasDescription~=1
                throw(MException('ConditionSet:invalidXML','invalid XML'));
            end
        end
               
        function validateParameters(xml)
            types = char(xml.getNodeName);
            type = types(1:end-1);
            
            for i = 1:xml.getChildNodes.getLength
                child = xml.getChildNodes.item(i-1);
                switch char(child.getNodeName)
                    case {'#comment', '#text'}
                    case type
                        edu.stanford.covert.cell.sim.util.ConditionSet.validateParameter(child);
                    otherwise
                        throw(MException('ConditionSet:invalidXML','invalid XML'));
                end
            end
        end
        
        function validateParameter(xml)
            hasName = 0;
            hasState = 0;
            hasProcess = 0;
            for i = 1:xml.getAttributes.getLength
                child = xml.getAttributes.item(i - 1);
                switch char(child.getNodeName)
                    case {'#comment', '#text'}
                    case 'name'
                        hasName = hasName + 1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML', 'invalid XML'));
                        end
                    case 'index'
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML', 'invalid XML'));
                        end
                    case 'state'
                        hasState = hasState + 1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML', 'invalid XML'));
                        end
                    case 'process'
                        hasProcess = hasProcess + 1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML', 'invalid XML'));
                        end
                    case 'value'
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML', 'invalid XML'));
                        end
                    otherwise
                        throw(MException('ConditionSet:invalidXML', 'invalid XML'));
                end
            end
            if hasName ~= 1 || (hasState + hasProcess) > 1
                throw(MException('ConditionSet:invalidXML', 'invalid XML'));
            end
        end
        
        function validatePerturbations(xml)
            for i = 1:xml.getChildNodes.getLength
                child = xml.getChildNodes.item(i-1);
                switch char(child.getNodeName)
                    case {'#comment', '#text'}
                    case 'perturbation'
                        edu.stanford.covert.cell.sim.util.ConditionSet.validatePerturbation(child);
                    otherwise
                        throw(MException('ConditionSet:invalidXML','invalid XML'));
                end
            end
        end
        
        function validatePerturbation(xml)
            hasType = 0;
            hasComponent = 0;
            hasCompartment = 0;
            hasTime = 0;
            hasValue = 0;
            for i = 1:xml.getAttributes.getLength
                child = xml.getAttributes.item(i-1);
                switch char(child.getNodeName)
                    case {'#comment', '#text'}
                    case 'type'
                        type = char(child.getFirstChild.getNodeValue);
                        hasType = hasType+1;
                        if ~all(ismember(type, {'geneticKnockout', 'stimulus', 'media'}));
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'component'
                        hasComponent = hasComponent+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case 'compartment'
                        hasCompartment = hasCompartment+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    case {'initialTime', 'finalTime'}
                        hasTime = hasTime+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                        val = char(child.getFirstChild.getNodeValue);
                        val = strrep(val, 'INF','Inf');
                        [x, status] = str2num(val); %#ok<ST2NM>
                        if ~status
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                        validateattributes(x, {'numeric'}, {'real', 'nonnegative'});
                    case 'value'
                        hasValue = hasValue+1;
                        if isempty(char(child.getFirstChild.getNodeValue))
                            throw(MException('ConditionSet:invalidXML','invalid XML'));
                        end
                    otherwise
                        throw(MException('ConditionSet:invalidXML','invalid XML'));
                end
            end
            if hasType~=1 || hasComponent~=1 || (strcmp(type, 'geneticKnockout') && (hasCompartment || hasTime || hasValue)) || ...
                    (~strcmp(type, 'geneticKnockout') && (~hasCompartment || ~hasValue))
                throw(MException('ConditionSet:invalidXML','invalid XML'));
            end
        end
        
        function val = jsonFormat(data)
            val = edu.stanford.covert.io.jsonFormat(data);
            val = strrep(val, '&', '&amp;');
            val = strrep(val, '"', '&quot;');
            val = strrep(val, '''', '&apos;');
            val = strrep(val, '<', '&lt;');
            val = strrep(val, '>', '&gt;');
        end
        
        function data = jsonParse(val)
            val = strrep(val, '&gt;', '>');
            val = strrep(val, '&lt;', '<');
            val = strrep(val, '&apos;', '''');
            val = strrep(val, '&quot;', '"');
            val = strrep(val, '&amp;', '&');
            data = edu.stanford.covert.io.jsonParse(val);
        end
    end
end